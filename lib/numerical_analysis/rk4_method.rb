require 'numerical_analysis/numerical_ode_solving_method'

module NumericalAnalysis

  # Encapsulates the RK4 method for numerical first order ODE solution. An 
  # initial condition is passed in along with a lambda representing the 
  # differential function. The next value in the iteration is generated by 
  # calling the iterate method.
  class RK4Method < NumericalODESolvingMethod
  
    # Iterates to the next value in the solution using the RK4 method, e.g.:
    #
    #   k_1 = interval * f(x_current, y_current)
    #   k_2 = interval * f(x_current + 0.5 * interval, y_current + 0.5 * k_1)
    #   k_3 = interval * f(x_current + 0.5 * interval, y_current + 0.5 * k_2)
    #   k_4 = interval * f(x_current + interval, y_current + k_3)
    # 
    #   y_next = y_current + 1/6 * (k_1 + 2 * k_2 + 2 * k_3 + k_4)
    #
    #   where f(x,y) is the function in the equation dy/dx = f(x,y),
    #         y is the dependent variable,
    #         x is the independent variable
    # 
    # Returns the resulting dependent variable value and the new independent 
    # variable value in the way defined in the NumericalODESolvingMethod.
    def iterate
      # Calculate the values of k_1 to k_4 in line with the RK4 method.
      k_1 = @differential_function.call(
        @current_independent_variable_value,
        @current_dependent_variable_value
      ) * @interval
    
      k_2 = @differential_function.call(
        @current_independent_variable_value + (@interval * 0.5),
        @current_dependent_variable_value + (k_1 * 0.5)
      ) * @interval
    
      k_3 = @differential_function.call(
        @current_independent_variable_value + (@interval * 0.5),
        @current_dependent_variable_value + (k_2 * 0.5)
      ) * @interval
    
      k_4 = @differential_function.call(
        @current_independent_variable_value + @interval,
        @current_dependent_variable_value + k_3
      ) * @interval
    
      # Calculate the next value using the current value and the values of
      # k_1, k_2, k_3 and k_4.
      next_value = @current_dependent_variable_value + (
        k_1 + k_2 * 2 + k_3 * 2 + k_4
      ) * (1.0/6.0)
      
      # Set the dependent and independent variables to their new values.   
      @current_independent_variable_value += interval
      @current_dependent_variable_value = next_value
    
      # Call super to return the new values.
      super
    end
  
  end

end